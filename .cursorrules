Самое главное - не ломай того что работает!!!
Не нужно сохранять каждое изменение в git, только по команде
Не нужно после каждого выполненного задания перечислять что было сделано, суммировать и подводить итоги. 
Мы работаем над проектом автоматизации рабочего места Актерского агента.
Это интернет сайт с бэкендом и фронтендом.
Бекенд строим на Python и Django (и сразу мощная база данных Postgresql)
Фронтенд на JavaScript
Учитывай: что у меня есть небольшой опыт бэкенда но нет никакого опыта фронтенда.
Разворачиваем с помощью Докера в контейнерах.
Конечно база данных, бэкенд и фронтенд в отдельных контейнерах.
Бекенд общается с фронтендом по API.
Работать будем медленно, тестируя каждый модуль, не забегая вперед.
В работе при внесении правок в модули смотрим на целостность всего проекта, главное ничего не сломать.

Быстрые команды проекта:

ЛОКАЛЬНАЯ РАЗРАБОТКА (с HOT RELOAD):
При команде "Запусти проект" или "Запусти разработку" - выполнить: ./scripts/deploy/start_dev.sh
- Backend: Django runserver (автоперезагрузка при изменении .py файлов)
- Frontend: Vite HMR (мгновенное обновление при изменении .tsx/.ts/.css)
- НЕ ТРЕБУЕТ пересборки контейнеров при изменении кода!
- Изменения применяются автоматически за 1-2 секунды

ОСТАНОВКА ВСЕХ СЕРВИСОВ:
При команде "Останови проект" - выполнить: ./scripts/deploy/stop_all.sh (останавливает все сервисы)

TELEGRAM БОТ (опционально):
- Включить/выключить бота в DEV: ./scripts/bot/bot_dev_toggle.sh
- Проверка дубликатов бота: ./scripts/bot/bot_check_duplicates.sh
- Бот НЕ обязателен для разработки backend/frontend
- Один токен = один активный бот (избегать множественных экземпляров!)

ТЕСТИРОВАНИЕ:
При команде "Запусти тесты" - выполнить: ./scripts/test/test_all.sh (запускает все backend и frontend тесты)

PRODUCTION ДЕПЛОЙ:
- Автоматический при git push origin main
- Webhook на сервере запускает ./scripts/deploy/deploy.sh
- Использует docker-compose.prod.yml (Gunicorn + production build)

ВАЖНО! Правильный запуск бэкенда:
- ПРАВИЛЬНО: ./scripts/deploy/start_all.sh (полный запуск всех сервисов)
- ПРАВИЛЬНО: docker-compose -f docker/docker-compose.yml --env-file .env up -d (с флагом --env-file .env)
- НЕПРАВИЛЬНО: docker-compose restart backend (без --env-file .env)
- НЕПРАВИЛЬНО: docker-compose up -d backend (без --env-file .env)

Без флага --env-file .env бэкенд падает с ошибкой "SECRET_KEY setting must not be empty"!