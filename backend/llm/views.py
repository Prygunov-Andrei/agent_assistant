"""
Views –¥–ª—è LLM API endpoints
"""

import logging
import time
from datetime import datetime
from typing import Dict, Any

from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from django.http import Http404
from django.db import transaction

from artists.models import Artist
from telegram_requests.models import Request
from django.core.exceptions import ObjectDoesNotExist
from .services import LLMService
from .serializers import (
    LLMAnalysisRequestSerializer,
    LLMAnalysisResponseSerializer,
    ArtistForLLMSerializer,
    LLMStatusSerializer,
    LLMErrorSerializer
)
from .validators import LLMRetryHandler

logger = logging.getLogger(__name__)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def analyze_request(request, request_id):
    """
    –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM
    
    POST /api/requests/{id}/analyze/
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
        try:
            telegram_request = get_object_or_404(Request, id=request_id)
        except Http404:
            logger.warning(f"–ó–∞–ø—Ä–æ—Å {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return Response({'error': '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        serializer = LLMAnalysisRequestSerializer(data={
            'request_id': request_id,
            'use_emulator': request.data.get('use_emulator', True)
        })
        
        if not serializer.is_valid():
            return Response(
                {'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'details': serializer.errors},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è LLM
        artists = Artist.objects.all()
        artists_data = [
            {
                'id': artist.id,
                'name': f"{artist.first_name} {artist.last_name}",
                'age': artist.age if hasattr(artist, 'age') else None,
                'gender': artist.gender,
                'height': artist.height,
                'weight': artist.weight,
                'clothing_size': artist.clothing_size,
                'shoe_size': artist.shoe_size,
                'hair_color': artist.hair_color,
                'eye_color': artist.eye_color,
                'skills': [],  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                'languages': [],  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                'special_requirements': []  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            }
            for artist in artists
        ]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        request_data = {
            'text': telegram_request.text,
            'author_name': telegram_request.author_name,
            'author_telegram_id': telegram_request.author_telegram_id,
            'created_at': telegram_request.created_at.isoformat()
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM —Å–µ—Ä–≤–∏—Å
        llm_service = LLMService()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞
        use_emulator = serializer.validated_data['use_emulator']
        logger.info(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ {request_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {request.user.username}, —Ä–µ–∂–∏–º: {'—ç–º—É–ª—è—Ç–æ—Ä' if use_emulator else 'OpenAI GPT-4o'}")
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
            if use_emulator:
                logger.info("üìù –†–µ–∂–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä")
                analysis_result = llm_service.emulator.analyze_request(request_data, artists_data)
            else:
                logger.info("ü§ñ –†–µ–∂–∏–º GPT-4o: –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API")
                analysis_result = llm_service.analyze_request(request_data, artists_data)
            
            processing_time = time.time() - start_time
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º fallback –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
            contacts = analysis_result.get('contacts', {})
            casting_director = contacts.get('casting_director', {})
            
            # –ï—Å–ª–∏ LLM –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∏–º—è –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–ª–∏ confidence –Ω–∏–∑–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
            if (not casting_director.get('name') or 
                casting_director.get('name') == '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' or 
                casting_director.get('confidence', 0) < 0.5):
                
                logger.info(f"üîÑ Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ '{telegram_request.author_name}' –∫–∞–∫ –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ LLM –¥–∞–Ω–Ω—ã–µ, –Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
                contacts['casting_director'] = {
                    'name': telegram_request.author_name,  # Fallback –∏–º—è
                    'email': casting_director.get('email'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π email
                    'phone': casting_director.get('phone'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
                    'telegram': casting_director.get('telegram'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π telegram
                    'confidence': max(0.7, casting_director.get('confidence') or 0)  # –ú–∏–Ω–∏–º—É–º 0.7 –¥–ª—è fallback
                }
                
                logger.info(f"üìß –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: email={casting_director.get('email')}, phone={casting_director.get('phone')}, telegram={casting_director.get('telegram')}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (LLM —ç–º—É–ª—è—Ç–æ—Ä —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            response_data = {
                'project_analysis': analysis_result['project_analysis'],
                'contacts': contacts,
                'confidence': analysis_result['project_analysis'].get('confidence', 0.85),
                'processing_time': processing_time,
                'used_emulator': analysis_result.get('used_emulator', False),
                'errors': []
            }
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            from .validators import validate_llm_response
            try:
                validate_llm_response(analysis_result)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ project_analysis
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {request_id}: {str(e)}")
                return Response(
                    {'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ LLM', 'details': str(e)},
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            telegram_request.analysis_status = 'analyzed'
            telegram_request.save()
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ {request_id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {processing_time:.2f}—Å")
            
            return Response(response_data, status=status.HTTP_200_OK)
            
        except ValueError as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è OpenAI —Å–µ—Ä–≤–∏—Å–∞
            processing_time = time.time() - start_time
            error_message = str(e)
            logger.error(f"OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {request_id}: {error_message}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—à–∏–±–∫—É
            telegram_request.analysis_status = 'error'
            telegram_request.save()
            
            return Response(
                {
                    'error': 'OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    'details': error_message,
                    'processing_time': processing_time,
                    'used_emulator': False,
                    'suggestion': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ fallback_to_emulator –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
                },
                status=status.HTTP_503_SERVICE_UNAVAILABLE
            )
            
        except Exception as e:
            processing_time = time.time() - start_time
            error_type = type(e).__name__
            error_message = str(e)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π OpenAI API (–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± –æ—à–∏–±–∫–µ)
            if 'Error code: 401' in error_message or 'invalid_api_key' in error_message or 'Incorrect API key' in error_message:
                logger.error(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á OpenAI –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {request_id}: {error_message}")
                telegram_request.analysis_status = 'error'
                telegram_request.save()
                
                return Response(
                    {
                        'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á OpenAI',
                        'details': 'API –∫–ª—é—á OpenAI –Ω–µ –ø—Ä–æ—à–µ–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OPENAI_API_KEY.',
                        'processing_time': processing_time,
                        'used_emulator': False,
                        'suggestion': '–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys –∏ –æ–±–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ'
                    },
                    status=status.HTTP_503_SERVICE_UNAVAILABLE
                )
            
            # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ {request_id} ({error_type}): {error_message}")
            telegram_request.analysis_status = 'error'
            telegram_request.save()
            
            return Response(
                {
                    'error': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ LLM',
                    'error_type': error_type,
                    'details': error_message,
                    'processing_time': processing_time,
                    'used_emulator': False
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
            
    except Request.DoesNotExist:
        logger.warning(f"–ó–∞–ø—Ä–æ—Å {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return Response(
            {'error': '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'},
            status=status.HTTP_404_NOT_FOUND
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ analyze_request: {str(e)}")
        return Response(
            {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_artists_for_llm(request):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è LLM
    
    GET /api/artists/for-llm/
    """
    try:
        artists = Artist.objects.all()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        artists_data = [
            {
                'id': artist.id,
                'name': f"{artist.first_name} {artist.last_name}",
                'age': artist.age if hasattr(artist, 'age') else 25,  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
                'gender': artist.gender,
                'height': artist.height or 0,
                'weight': artist.weight or 0,
                'clothing_size': artist.clothing_size or '',
                'shoe_size': artist.shoe_size or '',
                'hair_color': artist.hair_color or '',
                'eye_color': artist.eye_color or '',
                'skills': [],  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                'languages': [],  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                'special_requirements': []  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            }
            for artist in artists
        ]
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç–æ–≤
        serializer = ArtistForLLMSerializer(artists_data, many=True)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è LLM: {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        
        return Response({
            'artists': serializer.data,
            'total_count': len(artists)
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è LLM: {str(e)}")
        return Response(
            {'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_llm_status(request):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ LLM —Å–µ—Ä–≤–∏—Å–∞
    
    GET /api/llm/status/
    """
    try:
        llm_service = LLMService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å (—ç—Ç–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤ –±—É–¥—É—â–µ–º)
        status_data = {
            'status': 'idle',
            'last_request_time': datetime.now(),
            'total_requests': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
            'successful_requests': 0,
            'failed_requests': 0,
            'emulator_enabled': llm_service.config.get('use_emulator', True),
            'current_model': llm_service.config.get('model', 'gpt-4o')
        }
        
        serializer = LLMStatusSerializer(data=status_data)
        if serializer.is_valid():
            return Response(serializer.validated_data, status=status.HTTP_200_OK)
        else:
            return Response(
                {'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ LLM: {str(e)}")
        return Response(
            {'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ LLM'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_request_analysis_status(request, request_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
    
    GET /api/requests/{id}/analysis-status/
    """
    try:
        try:
            telegram_request = get_object_or_404(Request, id=request_id)
        except Http404:
            logger.warning(f"–ó–∞–ø—Ä–æ—Å {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return Response({'error': '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)
        
        return Response({
            'request_id': request_id,
            'analysis_status': telegram_request.analysis_status,
            'created_at': telegram_request.created_at,
            'updated_at': telegram_request.updated_at
        }, status=status.HTTP_200_OK)
        
    except Request.DoesNotExist:
        return Response(
            {'error': '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'},
            status=status.HTTP_404_NOT_FOUND
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ {request_id}: {str(e)}")
        return Response(
            {'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
