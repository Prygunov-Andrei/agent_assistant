from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

from core.admin import BaseModelAdmin
from .models import Request, RequestImage, RequestFile


@admin.register(Request)
class RequestAdmin(BaseModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    list_display = [
        'id', 'author_name', 'status', 'has_media', 'agent_name', 
        'created_at', 'original_created_at', 'processed_at'
    ]
    list_filter = [
        'status', 'has_images', 'has_files', 'agent', 'is_active',
        'created_at', 'original_created_at', 'processed_at'
    ]
    search_fields = ['text', 'author_name', 'telegram_message_id']
    readonly_fields = [
        'author_name', 'author_telegram_id', 'sender_telegram_id',
        'telegram_message_id', 'telegram_chat_id', 'media_group_id',
        'has_images', 'has_files', 'original_created_at', 'created_at',
        'updated_at', 'is_forwarded', 'has_media'
    ]
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'text', 'author_name', 'author_telegram_id', 'sender_telegram_id'
            )
        }),
        ('Telegram –¥–∞–Ω–Ω—ã–µ', {
            'fields': (
                'telegram_message_id', 'telegram_chat_id', 'media_group_id',
                'original_created_at', 'is_forwarded'
            ),
            'classes': ('collapse',)
        }),
        ('–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã', {
            'fields': ('has_images', 'has_files', 'has_media'),
            'classes': ('collapse',)
        }),
        ('–û–±—Ä–∞–±–æ—Ç–∫–∞', {
            'fields': (
                'status', 'agent', 'processed_at', 'response_text'
            )
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('is_active', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    ordering = ['-created_at']
    date_hierarchy = 'created_at'
    
    def agent_name(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        if obj.agent:
            return format_html(
                '<a href="{}">{}</a>',
                reverse('admin:users_agent_change', args=[obj.agent.id]),
                obj.agent.get_full_name()
            )
        return '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    agent_name.short_description = '–ê–≥–µ–Ω—Ç'
    agent_name.admin_order_field = 'agent__first_name'
    
    def has_media(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        if obj.has_images and obj.has_files:
            return format_html(
                '<span style="color: blue;">üì∑üìÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + –§–∞–π–ª—ã</span>'
            )
        elif obj.has_images:
            return format_html('<span style="color: green;">üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</span>')
        elif obj.has_files:
            return format_html('<span style="color: orange;">üìÑ –§–∞–π–ª—ã</span>')
        return format_html('<span style="color: gray;">üìù –¢–µ–∫—Å—Ç</span>')
    has_media.short_description = '–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã'
    
    actions = ['mark_as_completed', 'mark_as_cancelled', 'assign_to_me']
    
    def mark_as_completed(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"""
        from django.utils import timezone
        updated = queryset.update(
            status='completed',
            processed_at=timezone.now()
        )
        self.message_user(request, f'{updated} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.')
    mark_as_completed.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ'
    
    def mark_as_cancelled(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"""
        updated = queryset.update(status='cancelled')
        self.message_user(request, f'{updated} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ.')
    mark_as_cancelled.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'
    
    def assign_to_me(self, request, queryset):
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ"""
        updated = queryset.update(agent=request.user)
        self.message_user(request, f'{updated} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º.')
    assign_to_me.short_description = '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ'


class RequestImageInline(admin.TabularInline):
    """Inline –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–∞"""
    model = RequestImage
    extra = 0
    readonly_fields = ['telegram_file_id', 'file_size', 'created_at']
    fields = ['image', 'telegram_file_id', 'file_size', 'caption', 'created_at']


class RequestFileInline(admin.TabularInline):
    """Inline –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
    model = RequestFile
    extra = 0
    readonly_fields = ['telegram_file_id', 'file_size', 'created_at']
    fields = ['file', 'original_filename', 'telegram_file_id', 'file_size', 'mime_type', 'created_at']


# –û–±–Ω–æ–≤–ª—è–µ–º RequestAdmin —Å inline'–∞–º–∏
RequestAdmin.inlines = [RequestImageInline, RequestFileInline]


@admin.register(RequestImage)
class RequestImageAdmin(BaseModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    list_display = [
        'id', 'request_link', 'image_preview', 'file_size', 'created_at'
    ]
    list_filter = ['created_at', 'request__status']
    search_fields = ['request__author_name', 'caption', 'telegram_file_id']
    readonly_fields = ['telegram_file_id', 'file_size', 'created_at', 'updated_at']
    
    def request_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å"""
        return format_html(
            '<a href="{}">–ó–∞–ø—Ä–æ—Å #{}</a>',
            reverse('admin:telegram_requests_request_change', args=[obj.request.id]),
            obj.request.id
        )
    request_link.short_description = '–ó–∞–ø—Ä–æ—Å'
    request_link.admin_order_field = 'request__id'
    
    def image_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if obj.image:
            return format_html(
                '<img src="{}" style="max-height: 100px; max-width: 100px;" />',
                obj.image.url
            )
        return '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    image_preview.short_description = '–ü—Ä–µ–≤—å—é'


@admin.register(RequestFile)
class RequestFileAdmin(BaseModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    list_display = [
        'id', 'request_link', 'original_filename', 'file_size_mb', 
        'mime_type', 'created_at'
    ]
    list_filter = ['mime_type', 'created_at', 'request__status']
    search_fields = [
        'request__author_name', 'original_filename', 'telegram_file_id'
    ]
    readonly_fields = [
        'telegram_file_id', 'file_size', 'created_at', 'updated_at', 'file_size_mb'
    ]
    
    def request_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å"""
        return format_html(
            '<a href="{}">–ó–∞–ø—Ä–æ—Å #{}</a>',
            reverse('admin:telegram_requests_request_change', args=[obj.request.id]),
            obj.request.id
        )
    request_link.short_description = '–ó–∞–ø—Ä–æ—Å'
    request_link.admin_order_field = 'request__id'
    
    def file_size_mb(self, obj):
        """–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        return f"{obj.file_size_mb} MB"
    file_size_mb.short_description = '–†–∞–∑–º–µ—Ä (MB)'
    file_size_mb.admin_order_field = 'file_size'