"""
MTProto –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""
import os
import logging
from typing import Optional, Dict, Any
from telethon import TelegramClient
from telethon.tl.types import Message, User, Channel, Chat
from telethon.errors import SessionPasswordNeededError, FloodWaitError

logger = logging.getLogger(__name__)


class TelegramMTProtoClient:
    """MTProto –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        self.session_name = 'agent_assistant_session'
        
        # –û—Ç–∫–ª—é—á–∞–µ–º MTProto –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        if not self.phone:
            logger.warning("‚ö†Ô∏è  TELEGRAM_PHONE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. MTProto –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
            self.client = None
            return
        
        if not all([self.api_id, self.api_hash]):
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH")
            self.client = None
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient(
            '/app/sessions/agent_assistant_session',
            int(self.api_id),
            self.api_hash
        )
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.client:
            return False
            
        try:
            await self.client.start(phone=self.phone)
            logger.info("MTProto –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
        except SessionPasswordNeededError:
            logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_PASSWORD")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MTProto –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.disconnect()
            logger.info("MTProto –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def get_message_info(self, chat_id: int, message_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Dict —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ None
        """
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: chat_id={chat_id}, message_id={message_id}")
        
        if not self.client:
            logger.error("‚ùå MTProto –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ entity –¥–ª—è chat_id={chat_id}")
            try:
                entity = await self.client.get_entity(chat_id)
                logger.info(f"‚úÖ Entity –ø–æ–ª—É—á–µ–Ω: {type(entity).__name__}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è chat_id={chat_id}: {e}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ MTProto...")
            message = await self.client.get_messages(entity, ids=message_id)
            if not message:
                logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
                
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. Forward: {bool(message.fwd_from)}")
            result = await self._extract_message_info(message)
            logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return result
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ FloodWaitError: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"üìú Traceback: {traceback.format_exc()}")
            return None
    
    async def _extract_message_info(self, message: Message) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        info = {
            'message_id': message.id,
            'text': message.text or message.raw_text or '',
            'date': message.date,
            'is_forwarded': bool(message.fwd_from),
            'original_author': None,
            'original_chat': None,
            'forward_date': None,
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç–æ)
        logger.info(f"üë§ –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        logger.info(f"   message.from_id: {message.from_id}")
        logger.info(f"   message.post_author: {message.post_author}")
        logger.info(f"   message.views: {message.views}")
        logger.info(f"   message.peer_id: {message.peer_id}")
        logger.info(f"   message.reply_to: {message.reply_to}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.from_id:
            logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è from_id={message.from_id}")
            author = await self._get_user_info(message.from_id)
            if author:
                info['original_author'] = author
                logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω: {author}")
            else:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        elif message.post_author:
            logger.info(f"üìù –ê–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞: {message.post_author}")
            info['original_author'] = {
                'type': 'post_author',
                'name': message.post_author
            }
        else:
            logger.info("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ
        if message.fwd_from:
            logger.info(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
            logger.info(f"   fwd_from.from_id: {message.fwd_from.from_id}")
            logger.info(f"   fwd_from.from_name: {message.fwd_from.from_name}")
            logger.info(f"   fwd_from.date: {message.fwd_from.date}")
            
            info['forward_date'] = message.fwd_from.date
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∞–≤—Ç–æ—Ä–µ
            if message.fwd_from.from_id:
                logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ from_id={message.fwd_from.from_id}")
                original_author = await self._get_user_info(message.fwd_from.from_id)
                if original_author:
                    info['original_author'] = original_author
                    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {original_author}")
                else:
                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —á–∞—Ç–µ
            if message.fwd_from.from_name:
                logger.info(f"üì¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç: {message.fwd_from.from_name}")
                info['original_chat'] = {
                    'name': message.fwd_from.from_name,
                    'type': 'channel'  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
                }
        else:
            logger.info("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ")
        
        logger.info(f"üìã –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}")
        return info
    
    async def _get_user_info(self, user_id) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = await self.client.get_entity(user_id)
            
            if isinstance(user, User):
                return {
                    'id': user.id,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'username': user.username,
                    'phone': user.phone,
                    'type': 'user'
                }
            elif isinstance(user, (Channel, Chat)):
                return {
                    'id': user.id,
                    'title': user.title,
                    'username': getattr(user, 'username', None),
                    'type': 'channel' if isinstance(user, Channel) else 'chat'
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            
        return None
    
    async def get_user_info_by_id(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
        if not self.client:
            return None
            
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: user_id={user_id}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity
            try:
                user = await self.client.get_entity(user_id)
                
                if isinstance(user, User):
                    user_info = {
                        'id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username,
                        'phone': user.phone,
                        'type': 'user'
                    }
                    logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ get_entity: {user_info}")
                    return user_info
                else:
                    logger.warning(f"‚ùå Entity {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {type(user)}")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è get_entity –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {user_id}: {e}")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –ø–æ username –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–∞–º
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
                    logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
                    
                    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å access_hash, –ø–æ–ø—Ä–æ–±—É–µ–º GetFullUser
                    from telethon.tl.functions.users import GetFullUser
                    from telethon.tl.types import InputUser
                    
                    # –ü—Ä–æ–±—É–µ–º —Å –Ω—É–ª–µ–≤—ã–º access_hash (–º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞–µ–≤)
                    try:
                        full_user = await self.client(GetFullUser(user=InputUser(user_id=user_id, access_hash=0)))
                        if full_user and full_user.user:
                            user_info = {
                                'id': full_user.user.id,
                                'first_name': full_user.user.first_name,
                                'last_name': full_user.user.last_name,
                                'username': full_user.user.username,
                                'phone': full_user.user.phone,
                                'type': 'user'
                            }
                            logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ GetFullUser: {user_info}")
                            return user_info
                    except Exception as e2:
                        logger.warning(f"‚ö†Ô∏è GetFullUser –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {user_id}: {e2}")
                    
                except Exception as e3:
                    logger.warning(f"‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è {user_id}: {e3}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            
        return None

    async def get_chat_info(self, chat_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
        if not self.client:
            return None
            
        try:
            chat = await self.client.get_entity(chat_id)
            
            if isinstance(chat, (Channel, Chat)):
                return {
                    'id': chat.id,
                    'title': chat.title,
                    'username': getattr(chat, 'username', None),
                    'type': 'channel' if isinstance(chat, Channel) else 'chat'
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
            
        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
mtproto_client = TelegramMTProtoClient()
