#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
"""

import os
import logging
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:8000/api')
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-domain.com/webhook')

class CastingAgencyBot:
    def __init__(self):
        self.api_base = API_BASE_URL
        self.application = None
        self.processed_media_groups = set()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ê–∫—Ç–µ—Ä—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤.

üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –û–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É.

üìã –ß—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:
‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–∏—Å–∫ –∞–∫—Ç–µ—Ä–æ–≤
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—Å—Ç–∏–Ω–≥—É
‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Å—Ç–∏–Ω–≥–æ–º

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_message)
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            response = requests.get(f"{self.api_base}/requests/stats/", timeout=5)
            if response.status_code == 200:
                stats = response.json()
                status_message = f"""
‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total', 0)}
‚Ä¢ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {stats.get('pending', 0)}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {stats.get('processed', 0)}

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
                """
            else:
                status_message = "‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        except Exception as e:
            status_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"
            
        await update.message.reply_text(status_message)
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
        user = update.effective_user
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        is_media_group = bool(message.media_group_id)
        is_first_media_group_message = False
        
        if is_media_group:
            if message.media_group_id not in self.processed_media_groups:
                # –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                is_first_media_group_message = True
                self.processed_media_groups.add(message.media_group_id)
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã, –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º,
            # –Ω–æ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        author_info = self._get_author_info(message, user)
        author_name = author_info['name']
        telegram_user_id = author_info['telegram_id']
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        message_text = ""
        has_images = False
        has_files = False
        
        if message.text:
            message_text = message.text
        elif message.caption:
            message_text = message.caption
        else:
            message_text = "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if message.photo:
            has_images = True
            message_text += f"\n\n[–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ {len(message.photo)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π]"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if message.document:
            has_files = True
            message_text += f"\n\n[–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {message.document.file_name}]"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        request_data = {
            "text": message_text,
            "author": author_name,
            "telegram_user_id": telegram_user_id,
            "telegram_message_id": message.message_id,
            "has_images": has_images,
            "has_files": has_files
        }
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"Message ID: {message.message_id}")
        logger.info(f"Media Group ID: {message.media_group_id}")
        logger.info(f"Photo count: {len(message.photo) if message.photo else 0}")
        logger.info(f"Document: {message.document.file_name if message.document else 'None'}")
        if message.photo:
            for i, photo in enumerate(message.photo):
                logger.info(f"  Photo {i}: {photo.file_id} ({photo.file_size} bytes)")
        if message.document:
            logger.info(f"  Document: {message.document.file_id} ({message.document.file_size} bytes) - {message.document.file_name}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ webhook
            webhook_data = {
                "message": {
                    "from": {
                        "id": telegram_user_id,
                        "username": user.username,
                        "first_name": user.first_name,
                        "last_name": user.last_name
                    },
                    "message_id": message.message_id,
                    "text": message_text,
                    "photo": [{"file_id": message.photo[-1].file_id, "file_size": message.photo[-1].file_size}] if message.photo else None,
                    "document": {
                        "file_id": message.document.file_id,
                        "file_name": message.document.file_name,
                        "mime_type": message.document.mime_type,
                        "file_size": message.document.file_size
                    } if message.document else None,
                    "media_group_id": message.media_group_id,
                    "chat": {"id": message.chat.id},
                    "date": int(message.date.timestamp()),
                    "forward_from": {
                        "id": message.forward_from.id,
                        "username": message.forward_from.username,
                        "first_name": message.forward_from.first_name,
                        "last_name": message.forward_from.last_name
                    } if message.forward_from else None,
                    "forward_from_chat": {
                        "id": message.forward_from_chat.id,
                        "title": message.forward_from_chat.title
                    } if message.forward_from_chat else None
                }
            }
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
            if is_media_group and not is_first_media_group_message:
                webhook_data["is_additional_media"] = True
            
            response = requests.post(
                f"{self.api_base}/webhook/telegram/webhook/",
                json=webhook_data,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ webhook
                response_data = response.json()
                if response_data.get('status') == 'ok':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                    if is_first_media_group_message or not is_media_group:
                        if message.forward_from or message.forward_from_chat:
                            await message.reply_text(
                                f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç {author_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                                reply_to_message_id=message.message_id
                            )
                        else:
                            await message.reply_text(
                                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                                reply_to_message_id=message.message_id
                            )
                    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} ({author_name})")
                elif response_data.get('status') == 'duplicate':
                    # –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    duplicate_info = response_data.get('duplicate_info', {})
                    duplicate_id = duplicate_info.get('duplicate_id', 'N/A')
                    similarity = duplicate_info.get('similarity', 0)
                    duplicate_author = duplicate_info.get('duplicate_author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    warning_text = (
                        f"‚ö†Ô∏è –ü–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                        f"ID –¥—É–±–ª–∏–∫–∞—Ç–∞: {duplicate_id}\n"
                        f"–ê–≤—Ç–æ—Ä: {duplicate_author}\n"
                        f"–°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.1%}\n\n"
                        f"–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω."
                    )
                    
                    await message.reply_text(
                        warning_text,
                        reply_to_message_id=message.message_id
                    )
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} ({author_name})")
                
            elif response.status_code == 409:
                # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω
                try:
                    response_data = response.json()
                    if response_data.get('status') == 'duplicate':
                        duplicate_info = response_data.get('duplicate_info', {})
                        duplicate_id = duplicate_info.get('duplicate_id', 'N/A')
                        similarity = duplicate_info.get('similarity', 0)
                        duplicate_author = duplicate_info.get('duplicate_author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        
                        warning_text = (
                            f"‚ö†Ô∏è –ü–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                            f"ID –¥—É–±–ª–∏–∫–∞—Ç–∞: {duplicate_id}\n"
                            f"–ê–≤—Ç–æ—Ä: {duplicate_author}\n"
                            f"–°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.1%}\n\n"
                            f"–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω."
                        )
                        
                        await message.reply_text(
                            warning_text,
                            reply_to_message_id=message.message_id
                        )
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} ({author_name})")
                    else:
                        await message.reply_text(
                            f"‚ö†Ô∏è {response_data.get('message', '–ü–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')}",
                            reply_to_message_id=message.message_id
                        )
                except:
                    await message.reply_text(
                        "‚ö†Ô∏è –ü–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.",
                        reply_to_message_id=message.message_id
                    )
                
            else:
                # –û—à–∏–±–∫–∞ API
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥: {response.status_code}"
                try:
                    error_data = response.json()
                    if 'detail' in error_data:
                        error_text += f"\n–î–µ—Ç–∞–ª–∏: {error_data['detail']}"
                except:
                    pass
                    
                await message.reply_text(error_text)
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} - {response.text}")
                
        except requests.exceptions.RequestException as e:
            # –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
            await message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message.message_id
            )
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            
        except Exception as e:
            # –û–±—â–∞—è –æ—à–∏–±–∫–∞
            await message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=message.message_id
            )
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    async def _save_images(self, request_id: int, photos):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Telegram –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É"""
        try:
            for photo in photos:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
                file = await self.application.bot.get_file(photo.file_id)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                file_url = file.file_path
                image_response = requests.get(file_url, timeout=30)
                
                if image_response.status_code == 200:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–∞—à API
                    files = {'image': image_response.content}
                    data = {
                        'request': request_id,
                        'telegram_file_id': photo.file_id
                    }
                    
                    image_response = requests.post(
                        f"{self.api_base}/request-images/",
                        files=files,
                        data=data,
                        timeout=30
                    )
                    
                    if image_response.status_code == 201:
                        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {request_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_response.status_code}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Telegram: {image_response.status_code}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
    
    async def send_reaction(self, chat_id: int, message_id: int, emoji: str = "‚úÖ"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            if self.application:
                await self.application.bot.set_message_reaction(
                    chat_id=chat_id,
                    message_id=message_id,
                    reaction=[{"type": "emoji", "emoji": emoji}]
                )
                logger.info(f"–†–µ–∞–∫—Ü–∏—è {emoji} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç {chat_id}")
                return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}")
        return False
    
    def _get_author_info(self, message, user):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
        if message.forward_from or message.forward_from_chat:
            if message.forward_from:
                # –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                original_user = message.forward_from
                author_name = f"{original_user.first_name or ''} {original_user.last_name or ''}".strip()
                if not author_name:
                    author_name = original_user.username or f"User_{original_user.id}"
                return {
                    'telegram_id': user.id,  # ID —Ç–æ–≥–æ, –∫—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–ª
                    'name': author_name,
                    'username': original_user.username,
                    'first_name': original_user.first_name,
                    'last_name': original_user.last_name,
                    'is_forwarded': True
                }
            else:
                # –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
                original_chat = message.forward_from_chat
                chat_name = original_chat.title or f"Chat_{original_chat.id}"
                return {
                    'telegram_id': user.id,  # ID —Ç–æ–≥–æ, –∫—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–ª
                    'name': chat_name,
                    'username': None,
                    'first_name': None,
                    'last_name': None,
                    'is_forwarded': True
                }
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            author_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            if not author_name:
                author_name = user.username or f"User_{user.id}"
            return {
                'telegram_id': user.id,
                'name': author_name,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'is_forwarded': False
            }
    

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
    def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_message))
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = CastingAgencyBot()
    bot.run_bot()

if __name__ == '__main__':
    main()
