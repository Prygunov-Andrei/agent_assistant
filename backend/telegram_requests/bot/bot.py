#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import logging
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError
from dotenv import load_dotenv
import pytz

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:8001/api')
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-domain.com/webhook')


class TelegramRequestsBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.api_base = API_BASE_URL
        self.application = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ê–∫—Ç–µ—Ä—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.

üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –û–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É.

üìã –ß—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:
‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–∏—Å–∫ –∞–∫—Ç–µ—Ä–æ–≤
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—Å—Ç–∏–Ω–≥—É
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Ñ–∞–π–ª—ã
‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Å—Ç–∏–Ω–≥–æ–º

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_message)
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            response = requests.get(f"{self.api_base}/requests/stats/", timeout=5)
            if response.status_code == 200:
                stats = response.json()
                status_message = f"""
‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('pending', 0)}
‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats.get('in_progress', 0)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω—ã: {stats.get('completed', 0)}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω—ã: {stats.get('cancelled', 0)}
‚Ä¢ –° –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏: {stats.get('with_media', 0)}
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today', 0)}

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
                """
            else:
                status_message = "‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        except Exception as e:
            status_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"
            
        await update.message.reply_text(status_message)
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ñ–∞–π–ª—ã)"""
        user = update.effective_user
        message = update.message
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        author_info = self._get_author_info(message, user)
        sender_info = self._get_sender_info(user)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = await self._process_message_content(message)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        webhook_data = {
            "message": {
                "from": {
                    "id": author_info['telegram_id'],
                    "username": author_info.get('username'),
                    "first_name": author_info.get('first_name'),
                    "last_name": author_info.get('last_name')
                },
                "message_id": message.message_id,
                "chat": {"id": message.chat_id},
                "text": message_data['text'],
                "date": int(message.date.timestamp()),
                "photo": message_data.get('photo'),
                "document": message_data.get('document'),
                "media_group_id": getattr(message, 'media_group_id', None)
            }
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ webhook
            response = requests.post(
                f"{self.api_base}/webhook/telegram/webhook/",
                json=webhook_data,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                response_data = response.json()
                if response_data.get('status') == 'ok':
                    await self._send_success_response(message, author_info, sender_info)
                    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {response_data.get('request_id')} –æ—Ç {author_info['name']}")
                else:
                    await self._send_error_response(message, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                    
            else:
                await self._send_error_response(message, f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                
        except requests.exceptions.RequestException as e:
            await self._send_error_response(message, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
            
        except Exception as e:
            await self._send_error_response(message, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    def _get_author_info(self, message, sender):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
        if message.forward_from:
            # –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_user = message.forward_from
            return {
                'telegram_id': original_user.id,
                'name': self._get_user_name(original_user),
                'username': original_user.username,
                'first_name': original_user.first_name,
                'last_name': original_user.last_name,
                'is_forwarded': True
            }
        elif message.forward_from_chat:
            # –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
            original_chat = message.forward_from_chat
            return {
                'telegram_id': original_chat.id,
                'name': original_chat.title or f"Chat_{original_chat.id}",
                'username': None,
                'first_name': None,
                'last_name': None,
                'is_forwarded': True
            }
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return {
                'telegram_id': sender.id,
                'name': self._get_user_name(sender),
                'username': sender.username,
                'first_name': sender.first_name,
                'last_name': sender.last_name,
                'is_forwarded': False
            }
    
    def _get_sender_info(self, sender):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ (—Ç–æ–º, –∫—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–ª)"""
        return {
            'telegram_id': sender.id,
            'name': self._get_user_name(sender),
            'username': sender.username
        }
    
    def _get_user_name(self, user):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        if not name:
            name = user.username or f"User_{user.id}"
        return name
    
    async def _process_message_content(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        result = {
            'text': '',
            'has_images': False,
            'has_files': False,
            'photo': None,
            'document': None
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
        if message.text:
            result['text'] = message.text
        elif message.caption:
            result['text'] = message.caption
        else:
            result['text'] = '[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if message.photo:
            result['has_images'] = True
            result['photo'] = [
                {
                    "file_id": photo.file_id,
                    "file_size": photo.file_size,
                    "width": photo.width,
                    "height": photo.height
                }
                for photo in message.photo
            ]
            if not result['text']:
                result['text'] = '[–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]'
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if message.document:
            result['has_files'] = True
            result['document'] = {
                "file_id": message.document.file_id,
                "file_name": message.document.file_name,
                "file_size": message.document.file_size,
                "mime_type": message.document.mime_type
            }
            if not result['text']:
                result['text'] = f'[–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {message.document.file_name}]'
        
        return result
    
    async def _send_success_response(self, message, author_info, sender_info):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        if author_info['is_forwarded']:
            response_text = (
                f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç {author_info['name']} "
                f"—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
            )
        else:
            response_text = "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        
        await message.reply_text(
            response_text,
            reply_to_message_id=message.message_id
        )
    
    async def _send_error_response(self, message, error_text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        await message.reply_text(
            f"‚ùå {error_text}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_to_message_id=message.message_id
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e)}")
    
    def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º—ã)
        self.application.add_handler(MessageHandler(filters.MediaGroup, self.handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        self.application.run_polling()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramRequestsBot()
    bot.run_bot()


if __name__ == '__main__':
    main()
