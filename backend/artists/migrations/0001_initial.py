# Generated by Django 4.2.24 on 2025-09-28 18:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли объект в системе', verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания объекта', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего обновления объекта', verbose_name='Дата обновления')),
                ('first_name', models.CharField(help_text='Имя артиста', max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Фамилия артиста', max_length=100, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, help_text='Отчество артиста', max_length=100, null=True, verbose_name='Отчество')),
                ('stage_name', models.CharField(blank=True, help_text='Сценическое имя артиста', max_length=150, null=True, verbose_name='Сценическое имя')),
                ('gender', models.CharField(choices=[('male', 'Мужской'), ('female', 'Женский')], help_text='Пол артиста', max_length=10, verbose_name='Пол')),
                ('birth_date', models.DateField(blank=True, help_text='Дата рождения артиста', null=True, verbose_name='Дата рождения')),
                ('age', models.PositiveIntegerField(blank=True, help_text='Возраст артиста (вычисляется автоматически)', null=True, verbose_name='Возраст')),
                ('media_presence', models.BooleanField(default=False, help_text='Имеет ли артист медийное присутствие', verbose_name='Медийность')),
                ('main_photo', models.ImageField(blank=True, help_text='Основная фотография артиста', null=True, upload_to='artists/photos/main/', verbose_name='Основная фотография')),
                ('bio', models.TextField(blank=True, help_text='Биография артиста', null=True, verbose_name='Биография')),
                ('height', models.PositiveIntegerField(blank=True, help_text='Рост артиста в сантиметрах', null=True, verbose_name='Рост (см)')),
                ('weight', models.PositiveIntegerField(blank=True, help_text='Вес артиста в килограммах', null=True, verbose_name='Вес (кг)')),
                ('body_type', models.CharField(blank=True, help_text='Тип телосложения артиста', max_length=100, null=True, verbose_name='Телосложение')),
                ('hair_color', models.CharField(blank=True, help_text='Цвет волос артиста', max_length=50, null=True, verbose_name='Цвет волос')),
                ('hairstyle', models.CharField(blank=True, help_text='Тип прически артиста', max_length=100, null=True, verbose_name='Прическа')),
                ('eye_color', models.CharField(blank=True, help_text='Цвет глаз артиста', max_length=50, null=True, verbose_name='Цвет глаз')),
                ('clothing_size', models.CharField(blank=True, help_text='Размер одежды артиста', max_length=20, null=True, verbose_name='Размер одежды')),
                ('shoe_size', models.CharField(blank=True, help_text='Размер обуви артиста', max_length=20, null=True, verbose_name='Размер обуви')),
                ('nationality', models.CharField(blank=True, help_text='Национальность артиста', max_length=100, null=True, verbose_name='Национальность')),
                ('phone', models.CharField(blank=True, help_text='Основной номер телефона артиста', max_length=20, null=True, verbose_name='Основной телефон')),
                ('backup_phone', models.CharField(blank=True, help_text='Запасной номер телефона артиста', max_length=20, null=True, verbose_name='Запасной телефон')),
                ('email', models.EmailField(blank=True, help_text='Электронная почта артиста', max_length=255, null=True, verbose_name='Email')),
                ('telegram_username', models.CharField(blank=True, help_text='Имя пользователя в Telegram', max_length=50, null=True, verbose_name='Telegram')),
                ('city', models.CharField(blank=True, help_text='Город, где проживает артист', max_length=100, null=True, verbose_name='Город проживания')),
                ('availability_status', models.BooleanField(default=True, help_text='Доступен ли артист для работы', verbose_name='Статус доступности')),
                ('rate_per_day', models.CharField(blank=True, help_text='Ставка оплаты за рабочий день', max_length=100, null=True, verbose_name='Ставка за день')),
                ('travel_availability', models.BooleanField(default=False, help_text='Готов ли артист к работе в других городах', verbose_name='Готовность к переездам')),
                ('created_by', models.ForeignKey(blank=True, help_text='Пользователь, который создал этот объект', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создано пользователем')),
            ],
            options={
                'verbose_name': 'Артист',
                'verbose_name_plural': 'Артисты',
                'ordering': ['last_name', 'first_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SkillGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли объект в системе', verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания объекта', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего обновления объекта', verbose_name='Дата обновления')),
                ('name', models.CharField(help_text='Уникальное название группы навыков', max_length=100, unique=True, verbose_name='Название группы')),
                ('description', models.TextField(blank=True, help_text='Подробное описание группы навыков', null=True, verbose_name='Описание группы')),
                ('created_by', models.ForeignKey(blank=True, help_text='Пользователь, который создал этот объект', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создано пользователем')),
            ],
            options={
                'verbose_name': 'Группа навыков',
                'verbose_name_plural': 'Группы навыков',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли объект в системе', verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания объекта', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего обновления объекта', verbose_name='Дата обновления')),
                ('name', models.CharField(help_text='Название конкретного навыка', max_length=100, verbose_name='Название навыка')),
                ('description', models.TextField(blank=True, help_text='Подробное описание навыка', null=True, verbose_name='Описание навыка')),
                ('created_by', models.ForeignKey(blank=True, help_text='Пользователь, который создал этот объект', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создано пользователем')),
                ('skill_group', models.ForeignKey(help_text='Группа, к которой относится навык', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='artists.skillgroup', verbose_name='Группа навыков')),
            ],
            options={
                'verbose_name': 'Навык',
                'verbose_name_plural': 'Навыки',
                'ordering': ['skill_group__name', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли объект в системе', verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания объекта', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего обновления объекта', verbose_name='Дата обновления')),
                ('institution_name', models.CharField(help_text='Полное название учебного заведения', max_length=200, unique=True, verbose_name='Название учебного заведения')),
                ('description', models.TextField(blank=True, help_text='Подробное описание учебного заведения', null=True, verbose_name='Описание заведения')),
                ('created_by', models.ForeignKey(blank=True, help_text='Пользователь, который создал этот объект', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создано пользователем')),
            ],
            options={
                'verbose_name': 'Учебное заведение',
                'verbose_name_plural': 'Учебные заведения',
                'ordering': ['institution_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Начинающий'), ('intermediate', 'Средний'), ('advanced', 'Продвинутый'), ('expert', 'Эксперт')], default='beginner', help_text='Уровень владения навыком', max_length=20, verbose_name='Уровень владения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('artist', models.ForeignKey(help_text='Артист, обладающий навыком', on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='artists.artist', verbose_name='Артист')),
                ('skill', models.ForeignKey(help_text='Навык артиста', on_delete=django.db.models.deletion.CASCADE, to='artists.skill', verbose_name='Навык')),
            ],
            options={
                'verbose_name': 'Навык артиста',
                'verbose_name_plural': 'Навыки артистов',
                'ordering': ['skill__skill_group__name', 'skill__name'],
            },
        ),
        migrations.CreateModel(
            name='ArtistPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(help_text='Фотография артиста', upload_to='artists/photos/additional/', verbose_name='Фотография')),
                ('is_main', models.BooleanField(default=False, help_text='Является ли основной фотографией', verbose_name='Основная фотография')),
                ('description', models.CharField(blank=True, help_text='Описание фотографии', max_length=200, null=True, verbose_name='Описание фотографии')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата загрузки')),
                ('artist', models.ForeignKey(help_text='Артист, к которому относится фотография', on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='artists.artist', verbose_name='Артист')),
            ],
            options={
                'verbose_name': 'Фотография артиста',
                'verbose_name_plural': 'Фотографии артистов',
                'ordering': ['-is_main', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ArtistLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название или описание ссылки', max_length=100, verbose_name='Название ссылки')),
                ('url', models.URLField(help_text='Адрес ссылки', max_length=500, verbose_name='URL ссылки')),
                ('description', models.TextField(blank=True, help_text='Подробное описание ссылки', null=True, verbose_name='Описание ссылки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('artist', models.ForeignKey(help_text='Артист, к которому относится ссылка', on_delete=django.db.models.deletion.CASCADE, related_name='links', to='artists.artist', verbose_name='Артист')),
            ],
            options={
                'verbose_name': 'Ссылка артиста',
                'verbose_name_plural': 'Ссылки артистов',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='ArtistEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graduation_year', models.PositiveIntegerField(help_text='Год окончания учебного заведения', verbose_name='Год окончания')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('artist', models.ForeignKey(help_text='Артист, получивший образование', on_delete=django.db.models.deletion.CASCADE, related_name='education', to='artists.artist', verbose_name='Артист')),
                ('education', models.ForeignKey(help_text='Учебное заведение', on_delete=django.db.models.deletion.CASCADE, to='artists.education', verbose_name='Учебное заведение')),
            ],
            options={
                'verbose_name': 'Образование артиста',
                'verbose_name_plural': 'Образование артистов',
                'ordering': ['-graduation_year'],
            },
        ),
        migrations.AddIndex(
            model_name='skillgroup',
            index=models.Index(fields=['is_active'], name='artists_ski_is_acti_03fb5d_idx'),
        ),
        migrations.AddIndex(
            model_name='skillgroup',
            index=models.Index(fields=['created_by'], name='artists_ski_created_2f19ae_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['is_active'], name='artists_ski_is_acti_88ea3f_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['created_by'], name='artists_ski_created_42420e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skill',
            unique_together={('skill_group', 'name')},
        ),
        migrations.AddIndex(
            model_name='education',
            index=models.Index(fields=['is_active'], name='artists_edu_is_acti_59fa5f_idx'),
        ),
        migrations.AddIndex(
            model_name='education',
            index=models.Index(fields=['created_by'], name='artists_edu_created_388b84_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='artistskill',
            unique_together={('artist', 'skill')},
        ),
        migrations.AlterUniqueTogether(
            name='artisteducation',
            unique_together={('artist', 'education')},
        ),
        migrations.AddIndex(
            model_name='artist',
            index=models.Index(fields=['is_active'], name='artists_art_is_acti_08a31d_idx'),
        ),
        migrations.AddIndex(
            model_name='artist',
            index=models.Index(fields=['created_by'], name='artists_art_created_aa79f8_idx'),
        ),
        migrations.AddIndex(
            model_name='artist',
            index=models.Index(fields=['gender'], name='artists_art_gender_1afb29_idx'),
        ),
        migrations.AddIndex(
            model_name='artist',
            index=models.Index(fields=['age'], name='artists_art_age_91b739_idx'),
        ),
        migrations.AddIndex(
            model_name='artist',
            index=models.Index(fields=['availability_status'], name='artists_art_availab_1e9ef8_idx'),
        ),
        migrations.AddIndex(
            model_name='artist',
            index=models.Index(fields=['city'], name='artists_art_city_957676_idx'),
        ),
    ]
