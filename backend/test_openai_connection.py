#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).resolve().parent
sys.path.insert(0, str(backend_path))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agent_assistant.settings')
django.setup()

from django.conf import settings
from llm.services import LLMService
from llm.openai_service import OpenAIService
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    print("=" * 80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö OPENAI API")
    print("=" * 80)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = settings.OPENAI_API_KEY
    
    print("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞...")
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª .env")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ llm_config.yaml
    print("2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        import yaml
        config_path = settings.BASE_DIR / 'llm_config.yaml'
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        use_emulator = config.get('llm', {}).get('use_emulator', True)
        model = config.get('llm', {}).get('model', 'gpt-4o')
        
        print(f"   –†–µ–∂–∏–º —ç–º—É–ª—è—Ç–æ—Ä–∞: {use_emulator}")
        print(f"   –ú–æ–¥–µ–ª—å: {model}")
        
        if use_emulator:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í –∫–æ–Ω—Ñ–∏–≥–µ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —ç–º—É–ª—è—Ç–æ—Ä–∞!")
            print("   –ò–∑–º–µ–Ω–∏—Ç–µ use_emulator: false –≤ llm_config.yaml –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI")
            print()
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
    print("3Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API...")
    try:
        openai_service = OpenAIService()
        print(f"‚úÖ OpenAI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   –ú–æ–¥–µ–ª—å: {openai_service.model}")
        print(f"   Temperature: {openai_service.temperature}")
        print(f"   Max tokens: {openai_service.max_tokens}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("4Ô∏è‚É£  –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
        connection_ok = openai_service.test_connection()
        
        if connection_ok:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —É—Å–ø–µ—à–Ω–æ!")
            print()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI —Å–µ—Ä–≤–∏—Å–∞: {e}")
        logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLMService
    print("5Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLMService...")
    try:
        llm_service = LLMService()
        service_info = llm_service.get_service_info()
        
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å–µ—Ä–≤–∏—Å: {service_info.get('service', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        if service_info.get('service') == 'openai':
            print("‚úÖ LLMService –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenAI")
            model_info = service_info.get('model_info', {})
            print(f"   –ú–æ–¥–µ–ª—å: {model_info.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print("‚ö†Ô∏è  LLMService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä")
            print("   –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ use_emulator: false –≤ llm_config.yaml")
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ LLMService: {e}")
        logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    print("6Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        test_request = {
            'id': 'test-001',
            'text': '''
–ö–∞—Å—Ç–∏–Ω–≥ –¥–ª—è —Ñ–∏–ª—å–º–∞ "–û—Å–µ–Ω–Ω–∏–µ –º–µ—á—Ç—ã"

–¢—Ä–µ–±—É—é—Ç—Å—è –∞–∫—Ç–µ—Ä—ã:
1. –ì–ª–∞–≤–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è - –∂–µ–Ω—â–∏–Ω–∞ 25-30 –ª–µ—Ç, –±—Ä—é–Ω–µ—Ç–∫–∞, –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ–ª—å
2. –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π - –º—É–∂—á–∏–Ω–∞ 30-35 –ª–µ—Ç, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ

–°—ä–µ–º–∫–∏: –ú–æ—Å–∫–≤–∞, –º–∞—Ä—Ç 2025
–ì–æ–Ω–æ—Ä–∞—Ä: –æ—Ç 50000 —Ä—É–±/—Å—ä–µ–º–æ—á–Ω—ã–π –¥–µ–Ω—å

–ö–æ–Ω—Ç–∞–∫—Ç—ã:
–ö–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä: –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞ (anna@casting.ru)
            ''',
            'author_name': '–ö–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä',
            'created_at': '2024-01-15T10:00:00'
        }
        
        print("   –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
        result = openai_service.analyze_request(test_request, [])
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {result.get('project_analysis', {}).get('project_title', '–ù/–î')}")
        print(f"   –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {result.get('project_analysis', {}).get('project_type', '–ù/–î')}")
        print(f"   –ñ–∞–Ω—Ä: {result.get('project_analysis', {}).get('genre', '–ù/–î')}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π: {len(result.get('project_analysis', {}).get('roles', []))}")
        print(f"   –ú–æ–¥–µ–ª—å: {result.get('model', '–ù/–î')}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —ç–º—É–ª—è—Ç–æ—Ä: {result.get('used_emulator', False)}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª–∏
        roles = result.get('project_analysis', {}).get('roles', [])
        if roles:
            print("   –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:")
            for i, role in enumerate(roles, 1):
                print(f"   {i}. {role.get('character_name', '–ù/–î')} - {role.get('description', '–ù/–î')[:50]}...")
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        return False
    
    print("=" * 80)
    print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("üéâ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("=" * 80)
    
    return True


if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        sys.exit(1)

