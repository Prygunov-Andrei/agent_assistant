#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Agent Assistant –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö

echo "üöÄ –ó–∞–ø—É—Å–∫ Agent Assistant..."
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
echo "1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
    exit 1
fi
echo "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
echo "2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞..."
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "   –°–æ–∑–¥–∞–µ–º –∏–∑ .env.example..."
    if [ -f .env.example ]; then
        cp .env.example .env
        echo "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–¨–¢–ï API –ö–õ–Æ–ß–ò!"
    else
        echo "‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
else
    echo "‚úÖ –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi
echo ""

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "3Ô∏è‚É£  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down > /dev/null 2>&1
echo "‚úÖ –°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis
echo "4Ô∏è‚É£  –ó–∞–ø—É—Å–∫ PostgreSQL –∏ Redis..."
docker-compose up -d db redis
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ë–î
until docker-compose exec -T db pg_isready -U postgres > /dev/null 2>&1; do
    echo "   –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL..."
    sleep 2
done
echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"
echo ""

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
echo "5Ô∏è‚É£  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
docker-compose run --rm backend python manage.py migrate
echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
echo ""

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
read -p "6Ô∏è‚É£  –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n) " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker-compose run --rm backend python manage.py load_test_data --clear
    echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
fi
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
echo "7Ô∏è‚É£  –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up -d
echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
echo "8Ô∏è‚É£  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker-compose ps
echo ""

echo "‚úÖ Agent Assistant –∑–∞–ø—É—â–µ–Ω!"
echo ""
echo "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ URLs:"
echo "   Frontend:  http://localhost:3000"
echo "   Backend:   http://localhost:8000"
echo "   API Docs:  http://localhost:8000/api/docs/"
echo "   Admin:     http://localhost:8000/admin/"
echo "   Nginx:     http://localhost"
echo ""
echo "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "   docker-compose logs -f backend"
echo "   docker-compose logs -f frontend"
echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞:"
echo "   docker-compose down"
echo ""
echo "üíæ –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö:"
echo "   docker-compose down -v"
echo ""

