/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
 */
import React from 'react';
import type { ImportResult } from '../../../types/bulkImport';
import './BulkImport.css';

interface ImportResultsProps {
  results: ImportResult;
  onStartOver: () => void;
}

const ImportResults: React.FC<ImportResultsProps> = ({ results, onStartOver }) => {
  const isSuccess = results.statistics.errors === 0;
  const totalProcessed = 
    results.statistics.created + 
    results.statistics.updated + 
    results.statistics.skipped + 
    results.statistics.errors;

  return (
    <div className="import-results">
      <div className={`header ${isSuccess ? 'success' : 'partial-success'}`}>
        {isSuccess ? (
          <>
            <div className="success-icon">‚úÖ</div>
            <h2>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</h2>
          </>
        ) : (
          <>
            <div className="warning-icon">‚ö†Ô∏è</div>
            <h2>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏</h2>
          </>
        )}
      </div>

      <div className="statistics-grid">
        <div className="stat-card large success">
          <div className="stat-value">{results.statistics.created}</div>
          <div className="stat-label">–°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω</div>
        </div>
        <div className="stat-card large info">
          <div className="stat-value">{results.statistics.updated}</div>
          <div className="stat-label">–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω</div>
        </div>
        <div className="stat-card large">
          <div className="stat-value">{results.statistics.skipped}</div>
          <div className="stat-label">–ü—Ä–æ–ø—É—â–µ–Ω–æ</div>
        </div>
        {results.statistics.errors > 0 && (
          <div className="stat-card large error">
            <div className="stat-value">{results.statistics.errors}</div>
            <div className="stat-label">–û—à–∏–±–æ–∫</div>
          </div>
        )}
      </div>

      <div className="details-section">
        <h3>–î–µ—Ç–∞–ª–∏ –∏–º–ø–æ—Ä—Ç–∞</h3>
        <div className="details-table-wrapper">
          <table className="details-table">
            <thead>
              <tr>
                <th>–°—Ç—Ä–æ–∫–∞</th>
                <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                <th>–ü–µ—Ä—Å–æ–Ω–∞</th>
                <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
              </tr>
            </thead>
            <tbody>
              {results.details.map((detail, idx) => (
                <tr key={idx} className={detail.action}>
                  <td>{detail.row_number}</td>
                  <td>
                    {detail.action === 'created' && '‚ú® –°–æ–∑–¥–∞–Ω–æ'}
                    {detail.action === 'updated' && 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ'}
                    {detail.action === 'skipped' && '‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ'}
                    {detail.action === 'error' && '‚ùå –û—à–∏–±–∫–∞'}
                  </td>
                  <td>
                    {detail.full_name || '-'}
                    {detail.person_id && (
                      <span className="person-id"> (ID: {detail.person_id})</span>
                    )}
                  </td>
                  <td>
                    {detail.error ? (
                      <span className="error-text">{detail.error}</span>
                    ) : (
                      <span className="success-text">–£—Å–ø–µ—à–Ω–æ</span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {!isSuccess && results.statistics.errors > 0 && (
        <div className="error-summary">
          <h4>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</h4>
          <p>
            –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ 
            –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ.
          </p>
        </div>
      )}

      <div className="footer-actions">
        <button 
          className="btn-primary btn-large"
          onClick={onStartOver}
          type="button"
        >
          –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ñ–∞–π–ª
        </button>
      </div>
    </div>
  );
};

export default ImportResults;

