/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import React, { useState, useEffect } from 'react';
import type { BackupRecord, BackupStatistics } from '../../../types/backup';
import { backupService } from '../../../services/backupService';
import { useAuth } from '../../../contexts/AuthContext';
import './BackupManager.css';

interface BackupManagerProps {
  className?: string;
}

export const BackupManager: React.FC<BackupManagerProps> = ({ className }) => {
  const { user } = useAuth();
  const [statistics, setStatistics] = useState<BackupStatistics | null>(null);
  const [backups, setBackups] = useState<BackupRecord[]>([]);
  const [loading, setLoading] = useState(true);
  const [creating, setCreating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const canCreate = backupService.canCreateBackup(user);
  const canDelete = backupService.canDeleteBackup(user);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [statsData, backupsData] = await Promise.all([
        backupService.getStatistics(),
        backupService.getBackups()
      ]);
      
      setStatistics(statsData);
      setBackups(backupsData);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö');
      console.error('Failed to load backup data:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateBackup = async () => {
    if (!canCreate) return;
    
    try {
      setCreating(true);
      setError(null);
      
      const newBackup = await backupService.createBackup();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
      setBackups(prev => [newBackup, ...prev]);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsData = await backupService.getStatistics();
      setStatistics(statsData);
      
    } catch (err: any) {
      setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞');
      console.error('Failed to create backup:', err);
    } finally {
      setCreating(false);
    }
  };

  const handleDeleteBackup = async (id: string) => {
    if (!canDelete) return;
    
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±—ç–∫–∞–ø?')) {
      return;
    }
    
    try {
      setError(null);
      
      await backupService.deleteBackup(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
      setBackups(prev => prev.filter(backup => backup.id !== id));
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsData = await backupService.getStatistics();
      setStatistics(statsData);
      
    } catch (err: any) {
      setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞');
      console.error('Failed to delete backup:', err);
    }
  };

  if (loading) {
    return (
      <div className={`backup-manager ${className || ''}`}>
        <div className="backup-loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`backup-manager ${className || ''}`}>

      {error && (
        <div className="backup-error">
          <span className="error-icon">‚ö†Ô∏è</span>
          <span>{error}</span>
          <button 
            className="error-close" 
            onClick={() => setError(null)}
            title="–ó–∞–∫—Ä—ã—Ç—å"
          >
            √ó
          </button>
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {statistics && (
        <div className="backup-statistics">
          <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <div className="stats-grid">
            <div className="stat-item">
              <div className="stat-label">–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø:</div>
              <div className="stat-value">
                {statistics.last_backup ? (
                  <>
                    <div>{statistics.last_backup.filename}</div>
                    <div className="stat-meta">
                      {backupService.formatDate(statistics.last_backup.created_at || '')}
                      {statistics.last_backup.file_size_mb && (
                        <span> ‚Ä¢ {statistics.last_backup.file_size_mb} –ú–ë</span>
                      )}
                    </div>
                  </>
                ) : (
                  '–ù–µ—Ç –±—ç–∫–∞–ø–æ–≤'
                )}
              </div>
            </div>
            
            <div className="stat-item">
              <div className="stat-label">–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤:</div>
              <div className="stat-value">{statistics.statistics.total_backups}</div>
            </div>
            
            <div className="stat-item">
              <div className="stat-label">–£—Å–ø–µ—à–Ω—ã—Ö:</div>
              <div className="stat-value success">{statistics.statistics.successful_backups}</div>
            </div>
            
            <div className="stat-item">
              <div className="stat-label">–° –æ—à–∏–±–∫–∞–º–∏:</div>
              <div className="stat-value error">{statistics.statistics.failed_backups}</div>
            </div>
            
            <div className="stat-item">
              <div className="stat-label">–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</div>
              <div className="stat-value">{statistics.statistics.total_size_mb} –ú–ë</div>
            </div>
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ */}
          <div className="storage-info">
            <h4>üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</h4>
            <div className="stats-grid">
              <div className="stat-item">
                <div className="stat-label">–ü–∞–ø–∫–∞:</div>
                <div className="stat-value">{statistics.local_storage.backup_dir}</div>
              </div>
              
              <div className="stat-item">
                <div className="stat-label">–°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞:</div>
                <div className="stat-value">{statistics.local_storage.free_space_gb} –ì–ë</div>
              </div>
              
              <div className="stat-item">
                <div className="stat-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</div>
                <div className="stat-value">{statistics.local_storage.used_space_gb} –ì–ë</div>
              </div>
              
              <div className="stat-item">
                <div className="stat-label">–û–±—â–∏–π –æ–±—ä–µ–º:</div>
                <div className="stat-value">{statistics.local_storage.total_space_gb} –ì–ë</div>
              </div>
            </div>
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ email */}
          <div className="email-info">
            <h4>üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
            <div className="stats-grid">
              <div className="stat-item">
                <div className="stat-label">–°—Ç–∞—Ç—É—Å:</div>
                <div className={`stat-value ${statistics.local_storage.email_enabled ? 'success' : 'error'}`}>
                  {statistics.local_storage.email_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
                </div>
              </div>
              
              {statistics.local_storage.email_recipient && (
                <div className="stat-item">
                  <div className="stat-label">–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</div>
                  <div className="stat-value">{statistics.local_storage.email_recipient}</div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ */}
      <div className="backup-actions">
        <button
          className={`create-backup-btn ${!canCreate ? 'disabled' : ''}`}
          onClick={handleCreateBackup}
          disabled={!canCreate || creating}
        >
          {creating ? (
            <>
              <div className="spinner small"></div>
              –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...
            </>
          ) : (
            <>
              üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ç–∫–∞–ø
            </>
          )}
        </button>
        
        {!canCreate && (
          <p className="permission-note">
            –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø—ã
          </p>
        )}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ */}
      <div className="backup-list">
        <h3>üìÅ –ò—Å—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ ({backups.filter(backup => backup.status !== 'deleted').length})</h3>
        
        {backups.filter(backup => backup.status !== 'deleted').length === 0 ? (
          <div className="no-backups">
            <p>üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤</p>
          </div>
        ) : (
          <div className="backups-grid">
            {backups.filter(backup => backup.status !== 'deleted').map((backup) => (
              <div key={backup.id} className="backup-card">
                <div className="backup-card-header">
                  <div className="backup-status">
                    <span className={`status-icon ${backup.status}`}>
                      {backupService.getStatusIcon(backup.status)}
                    </span>
                    <span className={`status-text ${backup.status}`}>
                      {backup.status_display}
                    </span>
                  </div>
                  
                  {canDelete && backup.status !== 'deleted' && (
                    <button
                      className="delete-btn"
                      onClick={() => handleDeleteBackup(backup.id)}
                      title="–£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø"
                    >
                      üóëÔ∏è
                    </button>
                  )}
                </div>
                
                <div className="backup-info">
                  <div className="backup-filename">{backup.filename}</div>
                  
                  <div className="backup-meta">
                    <div className="meta-item">
                      <span className="meta-label">–†–∞–∑–º–µ—Ä:</span>
                      <span className="meta-value">{backup.file_size_mb} –ú–ë</span>
                    </div>
                    
                    <div className="meta-item">
                      <span className="meta-label">–°–æ–∑–¥–∞–Ω:</span>
                      <span className="meta-value">
                        {backupService.formatDate(backup.created_at)}
                      </span>
                    </div>
                    
                    {backup.created_by && (
                      <div className="meta-item">
                        <span className="meta-label">–ê–≤—Ç–æ—Ä:</span>
                        <span className="meta-value">{backup.created_by}</span>
                      </div>
                    )}
                    
                    {backup.duration && (
                      <div className="meta-item">
                        <span className="meta-label">–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                        <span className="meta-value">{backup.duration.toFixed(1)} —Å–µ–∫</span>
                      </div>
                    )}
                  </div>
                  
                  {backup.google_drive_url && (
                    <div className="backup-actions-card">
                      <span className="local-file-info">
                        üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {backup.google_drive_file_id}
                      </span>
                    </div>
                  )}
                  
                  {backup.error_message && (
                    <div className="backup-error-message">
                      <span className="error-label">–û—à–∏–±–∫–∞:</span>
                      <span className="error-text">{backup.error_message}</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};
