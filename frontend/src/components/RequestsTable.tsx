import * as React from 'react';
import { useState } from 'react';
import { requestsService } from '../services/requests';
import { ErrorHandler } from '../utils/errorHandler';
import VirtualizedList from './common/VirtualizedList';
import { TableSkeleton } from './common/SkeletonLoader';
import AnimatedContainer from './common/AnimatedContainer';
import type { RequestListItem } from '../types';

const RequestsTable: React.FC = () => {
  const [requests, setRequests] = useState<RequestListItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchRequests = async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await requestsService.getRequests();
      setRequests(data);
    } catch (err) {
      ErrorHandler.logError(err, 'RequestsTable.fetchRequests');
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchRequests();
  }, []);

  const handleRowClick = (request: RequestListItem) => {
    // –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
    const params = new URLSearchParams({
      requestId: request.id.toString(),
      mode: 'project-creation'
    });
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.location.href = `/project-creation?${params.toString()}`;
  };

  const handleProjectCreated = async (_projectData: ProjectForm) => {
    setShowProjectModal(false);
    setSelectedRequest(null);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    await fetchRequests();
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    alert('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  };

  // –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ handleAnalyzeRequest –∏ handleShowContext


  // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–µ–∑–∫—É —Ç–µ–∫—Å—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
  const displayText = (text: string) => {
    return text;
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  const renderRequestRow = (request: RequestListItem, _index: number) => (
    <tr 
      key={request.id} 
      className="requests-table-row hover:bg-blue-50 cursor-pointer transition-colors duration-200"
      onClick={() => handleRowClick(request)}
    >
      <td className="requests-table-cell">
        <div className="request-date">
          <div className="request-date-date">
            {request.original_created_at ? new Date(request.original_created_at).toLocaleDateString('ru-RU', {
              day: '2-digit',
              month: '2-digit',
              year: '2-digit'
            }) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
          </div>
          <div className="request-date-time">
            {request.original_created_at ? new Date(request.original_created_at).toLocaleTimeString('ru-RU', {
              hour: '2-digit',
              minute: '2-digit'
            }) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
          </div>
        </div>
      </td>
      <td className="requests-table-cell">
        <div className="request-author">
          <div className="request-author-name">
            {request.author_name}
          </div>
          {request.is_forwarded && (
            <div className="request-forwarded">
              –ü–µ—Ä–µ—Å–ª–∞–Ω–æ
            </div>
          )}
        </div>
      </td>
      <td className="requests-table-cell">
        <div className="request-text">
          {displayText(request.text)}
        </div>
      </td>
      <td className="requests-table-cell">
        <div className="request-media">
          {request.images && request.images.length > 0 && (
            <div className="media-item">
              <div className="images-container">
                {request.images.map((image, index) => (
                  <img 
                    key={index}
                    src={image.image} 
                    alt={`–§–æ—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ ${index + 1}`}
                    className="request-image"
                    onError={(e) => {
                      e.currentTarget.style.display = 'none';
                    }}
                  />
                ))}
              </div>
            </div>
          )}
          {request.files && request.files.length > 0 && (
            <div className="media-item">
              <div className="files-container">
                {request.files.map((file, index) => (
                  <div key={index} className="file-item">
                    <span className="media-icon">üìÑ</span>
                    <a 
                      href={file.file} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="file-link"
                      onClick={(e) => e.stopPropagation()}
                    >
                      {file.original_filename}
                    </a>
                  </div>
                ))}
              </div>
            </div>
          )}
          {(!request.images || request.images.length === 0) && (!request.files || request.files.length === 0) && (
            <span className="no-media">–ù–µ—Ç –º–µ–¥–∏–∞</span>
          )}
        </div>
      </td>
      <td className="requests-table-cell">
        <div className="text-center text-gray-500 text-sm">
          –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        </div>
      </td>
    </tr>
  );

  if (loading) {
    return (
      <AnimatedContainer animation="fadeIn" className="fade-in">
        <div className="card overflow-hidden">
          <div className="p-4">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">–ó–∞–ø—Ä–æ—Å—ã –ö–î</h2>
            <TableSkeleton rows={8} columns={5} />
          </div>
        </div>
      </AnimatedContainer>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <div className="text-red-600 mb-4">
          <h3 className="text-lg font-semibold">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p>{error}</p>
        </div>
        <button onClick={fetchRequests} className="btn btn-primary">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  if (requests.length === 0) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">
          –ó–∞–ø—Ä–æ—Å—ã –ö–î
        </h2>
        <p className="text-gray-600 mb-6">
          –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        </p>
      </div>
    );
  }

  return (
    <>
      <AnimatedContainer animation="fadeIn" className="fade-in">
        <div className="card overflow-hidden">
          <div className="p-4">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">–ó–∞–ø—Ä–æ—Å—ã –ö–î</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="requests-table">
              <thead>
                <tr>
                  <th className="requests-table-header">–î–∞—Ç–∞</th>
                  <th className="requests-table-header">–ê–≤—Ç–æ—Ä</th>
                  <th className="requests-table-header">–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞</th>
                  <th className="requests-table-header">–ú–µ–¥–∏–∞</th>
                  <th className="requests-table-header">–°—Ç–∞—Ç—É—Å</th>
                </tr>
              </thead>
              <tbody>
                {requests.length > 50 ? (
                  <VirtualizedList
                    items={requests}
                    itemHeight={120}
                    containerHeight={600}
                    renderItem={renderRequestRow}
                  />
                ) : (
                  requests.map((request) => renderRequestRow(request, requests.indexOf(request)))
                )}
              </tbody>
            </table>
          </div>
        </div>
      </AnimatedContainer>

    </>
  );
};

export default RequestsTable;
