import React, { useState, useEffect, useCallback } from 'react';
import type { Artist, ArtistSearchParams } from '../../../types/artists';
import { artistsService } from '../../../services/artists';
import VirtualizedList from '../../common/VirtualizedList';
import { ListSkeleton } from '../../common/SkeletonLoader';
import AnimatedContainer from '../../common/AnimatedContainer';
import Tooltip from '../../common/Tooltip';
import { useDebouncedSearch } from '../../../hooks/useLazyLoading';

interface ArtistSelectionComponentProps {
  selectedArtists: number[];
  onSelectionChange: (artistIds: number[]) => void;
  placeholder?: string;
  maxSelections?: number;
  className?: string;
}

interface ArtistCardProps {
  artist: Artist;
  isSelected: boolean;
  onToggle: (artistId: number) => void;
}

const ArtistCard: React.FC<ArtistCardProps> = ({ artist, isSelected, onToggle }) => {
  const handleToggle = () => {
    onToggle(artist.id);
  };

  return (
    <div
      className={`border rounded-lg p-4 cursor-pointer transition-all duration-200 ${
        isSelected
          ? 'border-blue-500 bg-blue-50 shadow-md'
          : 'border-gray-200 hover:border-gray-300 hover:shadow-sm'
      }`}
      onClick={handleToggle}
    >
      <div className="flex items-start space-x-3">
        {/* –§–æ—Ç–æ –∞—Ä—Ç–∏—Å—Ç–∞ */}
        <div className="flex-shrink-0">
          {artist.main_photo ? (
            <img
              src={artist.main_photo}
              alt={artist.full_name}
              className="w-16 h-16 rounded-full object-cover"
            />
          ) : (
            <div className="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center">
              <span className="text-gray-500 text-sm">
                {artist.first_name[0]}{artist.last_name[0]}
              </span>
            </div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–∏—Å—Ç–µ */}
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium text-gray-900 truncate">
              {artist.stage_name || artist.full_name}
            </h3>
            {isSelected && (
              <div className="flex-shrink-0">
                <div className="w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
              </div>
            )}
          </div>

          <div className="mt-1 text-sm text-gray-600">
            <p>{artist.gender_display}, {artist.age ? `${artist.age} –ª–µ—Ç` : '–í–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            {artist.city && <p>üìç {artist.city}</p>}
            {artist.height && <p>üìè {artist.height} —Å–º</p>}
          </div>

          {/* –ù–∞–≤—ã–∫–∏ */}
          {artist.skills && artist.skills.length > 0 && (
            <div className="mt-2">
              <div className="flex flex-wrap gap-1">
                {artist.skills.slice(0, 3).map((skill) => (
                  <span
                    key={skill.id}
                    className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800"
                  >
                    {skill.name}
                  </span>
                ))}
                {artist.skills.length > 3 && (
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800">
                    +{artist.skills.length - 3} –µ—â–µ
                  </span>
                )}
              </div>
            </div>
          )}

          {/* –°—Ç–∞—Ç—É—Å */}
          <div className="mt-2 flex items-center space-x-2">
            <span
              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                artist.availability_status
                  ? 'bg-green-100 text-green-800'
                  : 'bg-red-100 text-red-800'
              }`}
            >
              {artist.availability_status_display}
            </span>
            {artist.media_presence && (
              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800">
                –ú–µ–¥–∏–π–Ω—ã–π
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const ArtistSelectionComponent: React.FC<ArtistSelectionComponentProps> = ({
  selectedArtists,
  onSelectionChange,
  placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏—Å—Ç–æ–≤...",
  maxSelections,
  className = ""
}) => {
  const [artists, setArtists] = useState<Artist[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchParams, setSearchParams] = useState<ArtistSearchParams>({
    limit: 50
  });

  // Debounced search hook
  const searchFunction = useCallback(async (searchQuery: string) => {
    const params = {
      ...searchParams,
      search: searchQuery || undefined
    };
    return await artistsService.getArtistsForSelection(params);
  }, [searchParams]);

  const { query, setQuery, results, loading: searchLoading } = useDebouncedSearch<Artist>(
    searchFunction,
    300
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadInitialArtists = async () => {
      setLoading(true);
      try {
        const data = await artistsService.getArtistsForSelection(searchParams);
        setArtists(data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤:', error);
      } finally {
        setLoading(false);
      }
    };
    loadInitialArtists();
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    if (query.trim() && results.length > 0) {
      setArtists(results);
    }
  }, [results, query]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏—Å—Ç–∞
  const handleToggleArtist = (artistId: number) => {
    if (selectedArtists.includes(artistId)) {
      // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      onSelectionChange(selectedArtists.filter(id => id !== artistId));
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
      if (!maxSelections || selectedArtists.length < maxSelections) {
        onSelectionChange([...selectedArtists, artistId]);
      }
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—É
  const handleGenderFilter = async (gender: 'male' | 'female' | '') => {
    const newParams = {
      ...searchParams,
      gender: gender || undefined
    };
    setSearchParams(newParams);
    setLoading(true);
    try {
      const data = await artistsService.getArtistsForSelection(newParams);
      setArtists(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—É:', error);
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const handleAvailabilityFilter = async (status: boolean | null) => {
    const newParams = {
      ...searchParams,
      availability_status: status === null ? undefined : status
    };
    setSearchParams(newParams);
    setLoading(true);
    try {
      const data = await artistsService.getArtistsForSelection(newParams);
      setArtists(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <AnimatedContainer animation="fadeIn" className={`space-y-4 ${className}`}>
      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="space-y-3">
        {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <div className="relative">
          <input
            type="text"
            placeholder={placeholder}
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {(loading || searchLoading) && (
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500"></div>
            </div>
          )}
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="flex flex-wrap gap-2">
          <Tooltip content="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –ø–æ–ª—É">
            <select
              value={searchParams.gender || ''}
              onChange={(e) => handleGenderFilter(e.target.value as 'male' | 'female' | '')}
              className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">–í—Å–µ –ø–æ–ª—ã</option>
              <option value="male">–ú—É–∂—Å–∫–æ–π</option>
              <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
            </select>
          </Tooltip>

          <Tooltip content="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏">
            <select
              value={searchParams.availability_status === undefined ? '' : searchParams.availability_status.toString()}
              onChange={(e) => {
                const value = e.target.value;
                handleAvailabilityFilter(value === '' ? null : value === 'true');
              }}
              className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="true">–î–æ—Å—Ç—É–ø–µ–Ω</option>
              <option value="false">–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω</option>
            </select>
          </Tooltip>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ */}
      <div className="flex items-center justify-between text-sm text-gray-600">
        <span>
          –í—ã–±—Ä–∞–Ω–æ: {selectedArtists.length}
          {maxSelections && ` –∏–∑ ${maxSelections}`}
        </span>
        {artists.length > 0 && (
          <span>–ù–∞–π–¥–µ–Ω–æ: {artists.length}</span>
        )}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ */}
      <div className="max-h-96 overflow-hidden">
        {loading ? (
          <ListSkeleton count={5} showAvatar={true} />
        ) : artists.length > 0 ? (
          artists.length > 20 ? (
            <VirtualizedList
              items={artists}
              itemHeight={140}
              containerHeight={384}
              renderItem={(artist: Artist) => (
                <div className="mb-2">
                  <ArtistCard
                    artist={artist}
                    isSelected={selectedArtists.includes(artist.id)}
                    onToggle={handleToggleArtist}
                  />
                </div>
              )}
            />
          ) : (
            <div className="space-y-2">
              {artists.map((artist) => (
                <ArtistCard
                  key={artist.id}
                  artist={artist}
                  isSelected={selectedArtists.includes(artist.id)}
                  onToggle={handleToggleArtist}
                />
              ))}
            </div>
          )
        ) : (
          <div className="text-center py-8 text-gray-500">
            <p>–ê—Ä—Ç–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            <p className="text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
          </div>
        )}
      </div>

      {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã */}
      {selectedArtists.length > 0 && (
        <div className="mt-4 p-3 bg-gray-50 rounded-lg">
          <h4 className="text-sm font-medium text-gray-700 mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã:</h4>
          <div className="flex flex-wrap gap-2">
            {selectedArtists.map((artistId) => {
              const artist = artists.find(a => a.id === artistId);
              return artist ? (
                <span
                  key={artistId}
                  className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800"
                >
                  {artist.stage_name || artist.full_name}
                  <button
                    onClick={() => handleToggleArtist(artistId)}
                    className="ml-1 text-blue-600 hover:text-blue-800"
                  >
                    √ó
                  </button>
                </span>
              ) : null;
            })}
          </div>
        </div>
      )}
    </AnimatedContainer>
  );
};

export default ArtistSelectionComponent;
