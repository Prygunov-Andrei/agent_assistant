/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import apiClient from './api';
import { 
  BackupRecord, 
  BackupStatistics, 
  BackupCreateRequest, 
  BackupDeleteResponse,
  BackupError 
} from '../types/backup';

const BASE_URL = '/core/backups';

export const backupService = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
   */
  async getBackups(): Promise<BackupRecord[]> {
    const response = await apiClient.get(BASE_URL);
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return response.data.results || response.data;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±—ç–∫–∞–ø–µ
   */
  async getBackup(id: string): Promise<BackupRecord> {
    const response = await apiClient.get(`${BASE_URL}/${id}`);
    return response.data;
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ç–∫–∞–ø
   */
  async createBackup(data: BackupCreateRequest = {}): Promise<BackupRecord> {
    const response = await apiClient.post(`${BASE_URL}/create_backup/`, data);
    return response.data;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ç–∫–∞–ø–æ–≤
   */
  async getStatistics(): Promise<BackupStatistics> {
    const response = await apiClient.get(`${BASE_URL}/statistics/`);
    return response.data;
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø
   */
  async deleteBackup(id: string): Promise<BackupDeleteResponse> {
    const response = await apiClient.delete(`${BASE_URL}/${id}/delete_backup/`);
    return response.data;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive
   */
  getGoogleDriveUrl(backup: BackupRecord): string | null {
    return backup.google_drive_url || null;
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
   */
  canCreateBackup(user: any): boolean {
    return user?.is_staff === true;
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
   */
  canDeleteBackup(user: any): boolean {
    return user?.is_staff === true;
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
   */
  formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 B';
    
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
   */
  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è UI
   */
  getStatusColor(status: string): string {
    switch (status) {
      case 'success':
        return 'green';
      case 'failed':
        return 'red';
      case 'pending':
        return 'orange';
      case 'deleted':
        return 'gray';
      default:
        return 'gray';
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è UI
   */
  getStatusIcon(status: string): string {
    switch (status) {
      case 'success':
        return '‚úÖ';
      case 'failed':
        return '‚ùå';
      case 'pending':
        return '‚è≥';
      case 'deleted':
        return 'üóëÔ∏è';
      default:
        return '‚ùì';
    }
  }
};
