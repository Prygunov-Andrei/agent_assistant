import apiClient from './api';
import type { 
  Person, 
  PersonMatch, 
  PersonSearchRequest, 
  PersonNameSearchRequest, 
  PersonType,
  PersonFormData,
  PersonSearchParams,
  PaginatedResponse,
  PersonProject
} from '../types/people';

class PeopleService {
  private baseUrl = '/people/';

  /**
   * –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
   */
  async searchPersonMatches(params: PersonSearchRequest): Promise<PersonMatch[]> {
    const response = await apiClient.post(`${this.baseUrl}search_matches/`, params);
    return response.data;
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω –ø–æ –∏–º–µ–Ω–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º fuzzy matching
   */
  async searchPersonsByName(params: PersonNameSearchRequest): Promise<PersonMatch[]> {
    const response = await apiClient.post(`${this.baseUrl}search_by_name/`, params);
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω –ø–æ —Ç–∏–ø—É
   */
  async getPersonsByType(personType: string): Promise<Person[]> {
    const response = await apiClient.get(`${this.baseUrl}by_type/${personType}/`);
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä—Å–æ–Ω
   */
  async getPersonTypes(): Promise<PersonType[]> {
    const response = await apiClient.get(`${this.baseUrl}person_types/`);
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–µ
   */
  async getPerson(id: number): Promise<Person> {
    const response = await apiClient.get(`${this.baseUrl}${id}/`);
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω
   */
  async getPersons(): Promise<Person[]> {
    const response = await apiClient.get(`${this.baseUrl}`);
    return response.data;
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω –ø–æ –∏–º–µ–Ω–∏ (–¥–ª—è MatchingSuggestionsPanel)
   */
  async searchPeople(params: { name: string; limit?: number }): Promise<PersonMatch[]> {
    const response = await apiClient.post(`${this.baseUrl}search_by_name/`, {
      name: params.name,
      limit: params.limit || 3
    });
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É –ø–æ ID
   */
  async getPersonById(id: number): Promise<Person> {
    const response = await apiClient.get(`${this.baseUrl}${id}/`);
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω—ã
   */
  async getPersonProjects(id: number, limit: number = 5): Promise<PersonProject[]> {
    const response = await apiClient.get(`${this.baseUrl}${id}/projects/`, {
      params: { limit }
    });
    return response.data;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É
   */
  async createPerson(data: PersonFormData): Promise<Person> {
    const formData = new FormData();
    
    Object.entries(data).forEach(([key, value]) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º undefined –∏ null
      if (value === undefined || value === null) {
        return;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (typeof value === 'string' && value.trim() === '') {
        return;
      }
      
      if (key === 'photo' && value instanceof File) {
        formData.append(key, value);
      } else if (key === 'social_media' || key === 'phones' || key === 'emails' || key === 'telegram_usernames') {
        // –ú–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–∫—Ç—ã —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
        formData.append(key, JSON.stringify(value));
      } else {
        formData.append(key, String(value));
      }
    });
    
    const response = await apiClient.post(this.baseUrl, formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    });
    return response.data;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É
   */
  async updatePerson(id: number, data: Partial<PersonFormData>): Promise<Person> {
    const formData = new FormData();
    
    Object.entries(data).forEach(([key, value]) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º undefined –∏ null
      if (value === undefined || value === null) {
        return;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (typeof value === 'string' && value.trim() === '') {
        return;
      }
      
      if (key === 'photo' && value instanceof File) {
        formData.append(key, value);
      } else if (key === 'social_media' || key === 'phones' || key === 'emails' || key === 'telegram_usernames') {
        // –ú–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–∫—Ç—ã —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
        formData.append(key, JSON.stringify(value));
      } else {
        formData.append(key, String(value));
      }
    });
    
    const response = await apiClient.patch(`${this.baseUrl}${id}/`, formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    });
    return response.data;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É
   */
  async deletePerson(id: number): Promise<void> {
    await apiClient.delete(`${this.baseUrl}${id}/`);
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
   */
  async searchWithPagination(params: PersonSearchParams): Promise<PaginatedResponse<Person>> {
    const response = await apiClient.get(`${this.baseUrl}search/`, { params });
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω –ø–æ —Ç–∏–ø—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getByTypeWithPagination(
    personType: 'director' | 'producer' | 'casting_director',
    params?: { page?: number; page_size?: number; sort?: string }
  ): Promise<PaginatedResponse<Person>> {
    const response = await apiClient.get(`${this.baseUrl}search/`, {
      params: {
        person_type: personType,
        ...params
      }
    });
    return response.data;
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω—ã
   * 
   * @param id - ID –ø–µ—Ä—Å–æ–Ω—ã
   * @param action - –î–µ–π—Å—Ç–≤–∏–µ: 'add' (–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ) –∏–ª–∏ 'replace' (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å)
   * @param contacts - –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã { phone?, email?, telegram? }
   */
  async mergeContacts(
    id: number, 
    action: 'add' | 'replace',
    contacts: {
      phone?: string;
      email?: string;
      telegram?: string;
    }
  ): Promise<Person> {
    const response = await apiClient.patch(`${this.baseUrl}${id}/merge-contacts/`, {
      action,
      ...contacts
    });
    return response.data;
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * 
   * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: contact_type, contact_value, person_type
   */
  async searchByContact(params: {
    contact_type: 'phone' | 'email' | 'telegram';
    contact_value: string;
    person_type?: string;
  }): Promise<Person[]> {
    const searchParams: any = {
      [params.contact_type]: params.contact_value
    };
    
    if (params.person_type) {
      searchParams.person_type = params.person_type;
    }
    
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /people/search/ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', searchParams);
    
    const response = await apiClient.get(`${this.baseUrl}search/`, {
      params: searchParams
    });
    
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç /people/search/:', response.data);
    
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    return response.data.results || response.data;
  }
}

export const peopleService = new PeopleService();
export default peopleService;
