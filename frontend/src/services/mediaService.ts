import api from './api';
import type { RequestImage, RequestFile } from '../types';
import { API_BASE_URL } from '../config/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
export interface RequestMediaResponse {
  id: number;
  has_images: boolean;
  has_files: boolean;
  images: RequestImage[];
  files: RequestFile[];
  images_count: number;
  files_count: number;
}

class MediaService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–ø—Ä–æ—Å–∞
   */
  async getRequestMedia(requestId: number): Promise<RequestMediaResponse> {
    try {
      const response = await api.get(`/requests/${requestId}/media/`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–∞–∑–æ–≤—ã–º URL
   */
  getImageUrl(imagePath: string): string {
    if (!imagePath) return '';
    
    // –ï—Å–ª–∏ URL —É–∂–µ –ø–æ–ª–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    
    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
    const baseUrl = API_BASE_URL.replace('/api', '');
    return `${baseUrl}${imagePath.startsWith('/') ? '' : '/'}${imagePath}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–∞–∑–æ–≤—ã–º URL
   */
  getFileUrl(filePath: string): string {
    if (!filePath) return '';
    
    // –ï—Å–ª–∏ URL —É–∂–µ –ø–æ–ª–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (filePath.startsWith('http')) {
      return filePath;
    }
    
    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
    const baseUrl = API_BASE_URL.replace('/api', '');
    return `${baseUrl}${filePath.startsWith('/') ? '' : '/'}${filePath}`;
  }

  /**
   * –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
   */
  async downloadFile(file: RequestFile): Promise<void> {
    try {
      const fileUrl = this.getFileUrl(file.file);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement('a');
      link.href = fileUrl;
      link.download = file.original_filename;
      link.target = '_blank';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   */
  formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 –ë';
    
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
   */
  getFileIcon(mimeType: string): string {
    if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
    if (mimeType.includes('pdf')) return 'üìÑ';
    if (mimeType.includes('word') || mimeType.includes('document')) return 'üìù';
    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'üìä';
    if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'üìΩÔ∏è';
    if (mimeType.includes('zip') || mimeType.includes('archive')) return 'üì¶';
    if (mimeType.includes('video')) return 'üé•';
    if (mimeType.includes('audio')) return 'üéµ';
    return 'üìé';
  }
}

export const mediaService = new MediaService();
